# DFS
# 시작 정점의 한 방향으로 갈 수 있는 경로가 있는 곳까지 깊이 탐색해 가다가 더이상 갈 곳이 없게 되면
# 가장 마지막에 만났던 갈림길 간선이 있는 정점으로 되돌아가(180도 회전 X 뒷걸음질!) 다른 방향의 정점으로 탐색을 반복
# 결국 모든 정점을 방문하여 처음 호출한 곳으로 뒷걸음질로 도착



# DFS 재귀함수 -> 시작지점과 끝지점 같은지 확인하기
def dfs(s, e, used=[]):  # s = 시작지점, e = 찾는지점, used = 사용한 요소 넣을 빈 리스트
    if s == e:  # 시작지점이 찾는 지점과 같다면
        return 1  # 1을 반환
    used.append(s)  # used 리스트에 s 추가
    for i in adj[s]:  # 시작지점과 찾는지점이 다를 때 -> adj[s]의 값을 순회
        if i == e:  # adj[s]의 요소 값이 찾는지점과 같다면
            return 1  # 1을 반환
        elif i not in used:  # used 안에 i가 없다면
            if dfs(i, e, used) == True:  # i 넣고 다시 시작
                return 1
    return 0  # 위의 모든 경우가 아니라면



# 그래프 경로

# 1. 그래프 - 인접행렬로 작성하는 방법
# 구현이 간단
# but 노드 간의 연결을 확인할 때에는 시간복잡도가 증가한다

node, edge = map(int, input().split())  # 노드와 간선의 수(점의 개수 = 노드, 연결선 수 = 간선)

# 노드의 갯수가 N, N X N 이차원 배열을 만든다.
# a -> f 연결되어 있는지 확인하라... adj[a][f]
# a -> ? 연결되어 있는지 모두 확인하다... for x: 0 -> node - 1
adj = [[0 for _ in range(node)] for _ in range(node)]

# 입력으로 노드간의 연결을 입력으로 받는다 (간선 정보)
for _ in range(edge):  # 보통 간선으로 받음
    src, dest = map(int, input().split())  # 시작정점과 끝정점의 연결 여부 입력
    adj[src][dest] = 1  # src <-> dest 서로 연결점이 있다 ->> 단반향임! 양방향 필요
    adj[dest][src] = 1  # dest <-> src 서로 연결점이 있다

# 2. 그래프 - 인접리스트로 작성하는 방법 (연결 관계만 기록하는 방법)
# 연결 관계만 기록하는 방법. 만들 때 조금 복잡
# 메모리에 낭비가 생길 수 있다

# a -> [b, c, f] / b -> [a, f]....
node, edge = map(int, input().split())  # 노드와 간선의 수(정점, 연결선 수)

# 노드의 갯수 만큼 빈 리스트를 만든다
adj = [[] for _ in range(node)]

for _ in range(edge):
    src, dest = map(int, input().split())
    adj[src].append(dest)  # src -> dest 연결 정보를 추가 ->> 단방향임 양방향 필요!
    adj[dest].append(src)  # dest -> src 연결 정보를 추가
    
    
3. stack으로?    
def dfs(graph, visited, start, end):
    # 현재 위치가 목적지면 1 반환, 종료 (기저조건)
    if start == end:
        return True

    # 현재 위치 방문 체크
    visited[start] = True

    # 현재 위치와 연결된 모든 노드 탐색
    for nxt in graph[start]:
        # 연결된 노드의 방문 여부 확인
        if visited[nxt] == False:
            # 들어갈 노드 방문 체크 해주고 재귀 호출
            visited[nxt] = True
            r = dfs(graph, visited, nxt, end)
            # 목적지에 도달해서 반환받은 1로 종료
            if r == True:
                return True

    return False


T = int(input())
for tc in range(1, T + 1):
    # 정점 갯수와 간선의 갯수 입력
    V, E = map(int, input().split())

    # 인접 리스트를 생성하는데...
    graph = [[] for _ in range(V + 1)]
    for i in range(E):
        s, e = map(int, input().split())
        graph[s].append(e) # 단방향 그래프라서 s -> e

    # S -> ... -> G 연결하는 경로가 있는가...?
    S, G = map(int, input().split())

    # 방문 체크할 배열 생성
    visited = [False] * (V + 1)

    # 목적지 도달했는지 여부로 결과 출력
    result = dfs(graph, visited, S, G)
    if result == True:
        print(f'#{tc} 1')
    else:
        print(f'#{tc} 0')
